TopHat is a mathematically formalized language for Task-Oriented Programming (TOP). It allows developers to specify workflows and business processes in a formal language, reason about their equality and use symbolic execution to verify their correctness and generate next-step hints. TopHat can run workflow specifications supporting collaborators during their execution. However, it can only do so for a statically specified amount of work. That is, the number of tasks running in parallel is always predefined by the developer. In contrast, other TOP engines like iTasks and mTasks act like an operating system, starting and stopping tasks at will.

To capture this dynamic nature of workflow systems, we introduce Dynamic TopHat: a moderate extension to the TopHat calculus which allows end-users to initialize and kill tasks at runtime. Although this is a restricted version of the dynamic task lists found in iTasks, where the system itself can initialize new tasks, we show that common use cases of this feature are still expressible in Dynamic TopHat. Also, our proposed solution does not compromise the formal reasoning properties of TopHat. TopHat's metatheory is formalized in the dependently typed programming language Idris and its symbolic execution engine is implemented in Haskell.
